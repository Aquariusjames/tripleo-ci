#!/bin/bash
#
# Copyright 2013 Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

set -e

# We don't want this running twice, even if it fails
# We'll end up with lots of stuff duplicated
[ -e /opt/stack/setup-testenvs.done ] && exit 0
touch /opt/stack/setup-testenvs.done

# Calculate number of envs to setup based on lowest of Host Mem/CPU and Disk
MEMTOTAL=$(free -g | awk '/Mem/ {print $2}')
NUMENVS=$(expr $MEMTOTAL / $(os-apply-config --key gearman-worker.mem-per-env --key-default 20))

CPUTOTAL=$(grep "^processor" /proc/cpuinfo | wc -l)
ENVS=$(expr $CPUTOTAL / $(os-apply-config --key gearman-worker.cpu-per-env --key-default 5))
NUMENVS=$(($ENVS < $NUMENVS ? $ENVS : $NUMENVS))

DISKTOTAL=$(df /var/lib/libvirt/images/ | awk '/^\// {print $2}')
ENVS=$(expr $DISKTOTAL / 1024 / 1024 / $(os-apply-config --key gearman-worker.disk-per-env --key-default 100))
NUMENVS=$(($ENVS < $NUMENVS ? $ENVS : $NUMENVS))

echo "Setting up $NUMENVS test environments"

export PATH=/opt/stack/tripleo-incubator/scripts/:$PATH

OVSBRIDGE=$(os-apply-config --key neutron.ovs.physical_bridge --type netdevice)
# Create a dummy device on the public bridge, this will have an IP on the overcloud
# TODO : make this persist across reboots
DUMMYDEVICE=tedev
ip link add $DUMMYDEVICE type dummy
ensure-bridge $OVSBRIDGE $DUMMYDEVICE

# Place the physical interface onto the seed bridge
ensure-bridge $OVSBRIDGE \
              $(os-apply-config --key neutron.ovs.public_interface --type netdevice)

# Generate a ssh keypair
if [ ! -e /root/.ssh/test_env_rsa ] ; then
  ssh-keygen -N '' -f /root/.ssh/test_env_rsa
  echo no-port-forwarding,no-agent-forwarding,no-X11-forwarding,command=\"/usr/local/bin/ci_commands\" $(cat /root/.ssh/test_env_rsa.pub) >> ~/.ssh/authorized_keys
fi

# Define OS Auth env variables, needed for neutron command
export OS_PASSWORD=$(os-apply-config --key gearman-worker.auth_passwd)
export OS_AUTH_URL=$(os-apply-config --key gearman-worker.auth_url --type netaddress)
# TODO : add a type to os-apply-config for username
export OS_USERNAME=$(os-apply-config --key gearman-worker.auth_user --type raw)
export OS_TENANT_NAME=$(os-apply-config --key gearman-worker.auth_tenant --type raw)

# Give this host an IP on tripleo-bm-test
MAC=$(ip link show ${DUMMYDEVICE} | awk 'NR==2 {print $2}')
NETWORKNAME=$(os-apply-config --key gearman-worker.network_name --type netdevice)
PORTOUTPUT=$(neutron port-create --name te_$(hostname) --mac-address $MAC --format shell --column fixed_ips $NETWORKNAME)
echo "$PORTOUTPUT"
HOSTIP=$(echo "$PORTOUTPUT" | grep -E -o "([0-9]+\.){3}[0-9]+")
# TODO : Get prefix length
ip addr add $HOSTIP/24 dev $DUMMYDEVICE

killall -9 testenv-worker || true
for port in $(neutron port-list | awk "\$4~\"te_$(hostname)_.*\" {print \$2}") ; do
    neutron port-delete $port
done

for NUM in $(seq 1 $NUMENVS) ; do
    ensure-test-env $HOSTIP $OVSBRIDGE $NUM
done
